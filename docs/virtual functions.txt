It is a function or method whose behavior can be overridden within an inheriting class by a function with the same signature. In other words, the purpose of virtual functions is to allow customization of derived class implementations.

Practical real world scenarios where virtual functions will be useful
Example1
====================================================================================================================================
Networking: In networking libraries or frameworks, virtual functions can be used to define callbacks for handling network events such as receiving data or connection status changes. Different network protocols or communication patterns may require different handling, and virtual functions allow developers to define custom behavior for these events.
#include <iostream>

// Abstract base class representing a network handler
class NetworkHandler {
public:
    // Virtual function to handle data received from the network
    virtual void onDataReceived(const char* data, size_t length) = 0;

    // Virtual function to handle a change in connection status
    virtual void onConnectionStatusChanged(bool isConnected) = 0;
};

// TCP network handler implementation
class TCPNetworkHandler : public NetworkHandler {
public:
    // Implementation of onDataReceived for TCP
    void onDataReceived(const char* data, size_t length) override {
        std::cout << "TCP data received: " << std::string(data, length) << std::endl;
    }

    // Implementation of onConnectionStatusChanged for TCP
    void onConnectionStatusChanged(bool isConnected) override {
        if (isConnected) {
            std::cout << "TCP connection established" << std::endl;
        } else {
            std::cout << "TCP connection lost" << std::endl;
        }
    }
};

// UDP network handler implementation
class UDPNetworkHandler : public NetworkHandler {
public:
    // Implementation of onDataReceived for UDP
    void onDataReceived(const char* data, size_t length) override {
        std::cout << "UDP data received: " << std::string(data, length) << std::endl;
    }

    // Implementation of onConnectionStatusChanged for UDP
    void onConnectionStatusChanged(bool isConnected) override {
        if (isConnected) {
            std::cout << "UDP connection established" << std::endl;
        } else {
            std::cout << "UDP connection lost" << std::endl;
        }
    }
};

int main() {
    // Example usage: Simulate receiving data and connection status changes
    TCPNetworkHandler tcpHandler;
    UDPNetworkHandler udpHandler;

    // Simulate receiving data
    tcpHandler.onDataReceived("Hello from TCP", 13);
    udpHandler.onDataReceived("Hello from UDP", 13);

    // Simulate connection status change
    tcpHandler.onConnectionStatusChanged(true);
    udpHandler.onConnectionStatusChanged(false);

    return 0;
}