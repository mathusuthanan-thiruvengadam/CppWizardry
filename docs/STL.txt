The Standard Template Library (STL) 
	is a set of C++ template classes to provide common programming data structures and functions such as lists, stacks, arrays, etc. 
	It is a library of container classes, algorithms, and iterators. 
	It is a generalized library and so, its components are parameterized. 

STL has four components
1 Algorithms
2 Containers
3 Functors
4 Iterators
	
Algorithms
==========
The header algorithm defines a collection of functions specially designed to be used on a range of elements. They act on containers and provide means for various operations for the contents of the containers.
<algorithm>: Standard algorithms such as sorting, searching, and modifying sequences.
Sorting:
--------
std::sort: Sorts elements in a range.
std::stable_sort: Sorts elements in a range, preserving the relative order of equal elements.
std::partial_sort: Partially sorts a range up to a specified position.
std::nth_element: Partially sorts a range such that the nth element is in its sorted position.
std::is_sorted: Checks if a range is sorted.
std::is_sorted_until: Finds the largest sorted subrange in a range.
std::reverse: Reverses the order of elements in a range.
std::rotate: Rotates the elements in a range.
Searching:
----------
std::binary_search: Checks if a value exists in a sorted range.
std::lower_bound: Finds the first element not less than a value in a sorted range.
std::upper_bound: Finds the first element greater than a value in a sorted range.
std::equal_range: Finds a range of elements matching a value in a sorted range.
Heap:
----
std::make_heap: Constructs a heap from elements in a range.
std::push_heap: Adds an element to a heap.
std::pop_heap: Removes the largest element from a heap and reorganizes it.
std::sort_heap: Sorts elements in a heap.
Modifying the items
--------------------
std::copy: Copies elements from one range to another.
std::copy_if: Copies elements from one range to another, based on a condition.
std::copy_n: Copies a number of elements from one range to another.
std::copy_backward: Copies elements from a range to another, starting from the end.
std::move: Moves elements from one range to another.
std::move_backward: Moves elements from a range to another, starting from the end.
std::swap: Swaps the values of two elements.
std::swap_ranges: Swaps ranges of elements between two sequences.
std::transform: Applies a function to each element in a range and stores the result in another range.
Non-modifying sequence ops
---------------------------
std::all_of: Checks if all elements in a range satisfy a condition.
std::any_of: Checks if any element in a range satisfies a condition.
std::none_of: Checks if none of the elements in a range satisfy a condition.
std::count: Counts the occurrences of a value in a range.
std::count_if: Counts the occurrences of elements satisfying a condition in a range.
std::find: Finds the first occurrence of a value in a range.
std::find_if: Finds the first occurrence of an element satisfying a condition in a range.
std::find_if_not: Finds the first occurrence of an element not satisfying a condition in a range.
std::search: Searches for a subsequence within a range.


Containers
==========
1 Sequential: Array, vector, list, dqueue
2 Associative: Map, Set, multi set, multi map (ordered)
3 Unordered: Unordered map, unordered set, unordered multi-set, unordered multi-map

Headers to be included in c++ file
-----------------------------------
<vector>: Dynamic array implementation.
<list>: Doubly linked list implementation.
<deque>: Double-ended queue implementation.
<queue>: Queue adapter based on a container.
<stack>: Stack adapter based on a container.
<set>: Set container implementing a sorted collection of unique keys.
<map>: Map container implementing a sorted collection of key-value pairs.
<unordered_set>: Unordered set container implementing a collection of unique keys with a hash-based lookup.
<unordered_map>: Unordered map container implementing a collection of key-value pairs with a hash-based lookup.
<array>: Fixed-size array container.
<forward_list>: Singly linked list implementation.

Iterators
========
Headers to be included in c++
<iterator>: Common iterator types and utility functions.
<numeric>: Numeric algorithms such as accumulation and inner product.
iterator creation
------------------
std::begin: Returns an iterator to the beginning of a container or range.
std::end: Returns an iterator to the end of a container or range.
std::cbegin: Returns a const iterator to the beginning of a container or range.
std::cend: Returns a const iterator to the end of a container or range.
std::rbegin: Returns a reverse iterator to the beginning of a container or range.
std::rend: Returns a reverse iterator to the end of a container or range.
std::crbegin: Returns a const reverse iterator to the beginning of a container or range.
std::crend: Returns a const reverse iterator to the end of a container or range.

iterator manipulation
----------------------
std::next: Advances an iterator by a specified number of steps and returns the resulting iterator.
std::prev: Moves an iterator backward by a specified number of steps and returns the resulting iterator.
std::distance: Computes the distance between two iterators.
std::advance: Advances an iterator by a specified number of steps.
std::prev: Moves an iterator backward by a specified number of steps.




Misc
Other headers
Utility: <utility>: Various utility components such as pair, move, forward, etc.
Memory Management: memory>: Smart pointers (unique_ptr, shared_ptr, weak_ptr), memory management utilities, and allocator template.
Other: 
<functional>: Function objects and related utilities.
<type_traits>: Type traits and type utilities.
<tuple>: Tuple class template for storing collections of heterogeneous types.
Concurrency:
<mutex>: Mutual exclusion primitives.
<thread>: Threading support.
<future>: Asynchronous execution support.